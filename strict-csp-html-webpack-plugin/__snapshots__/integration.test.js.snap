// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`StrictCspHtmlWebpackPlugin Integration Test should build successfully with Trusted Types enabled 1`] = `
"<!doctype html><html><head><meta http-equiv="Content-Security-Policy" content="script-src 'strict-dynamic' 'sha256-e8lGHsOdJBC9DQQ8Ur9M8w3j6amuteoVxxn7lMC2I/4=' https: 'unsafe-inline';object-src 'none';base-uri 'self';require-trusted-types-for 'script';"><title>Complex Test</title><link rel="preload" href="styles.css" as="style"></head><body><h1>Hello World</h1><script>
    var scripts = [{"src":"library1.bundle.js"},{"src":"app.bundle.js"},{"src":"library2.bundle.js"}];
    var scriptSrcs = new Set(scripts.map(function(s) { return s.src; }));
    var policy = self.trustedTypes && self.trustedTypes.createPolicy ?
      self.trustedTypes.createPolicy('strict-csp#loader', {createScriptURL: function(u) {
        return scriptSrcs.has(u) ? u : null;
      }}) : { createScriptURL: function(u) { return u; } };
    scripts.forEach(function(scriptInfo) {
      var s = document.createElement('script');
      s.src = policy.createScriptURL(scriptInfo.src);
      if (scriptInfo.type) {
        s.type = scriptInfo.type;
      }
      s.async = false; // preserve execution order.
      document.body.appendChild(s);
    });
    </script><script>console.error("No reportUri provided. Trusted Types reports will not be sent to a remote endpoint.")</script></body></html>"
`;

exports[`StrictCspHtmlWebpackPlugin Integration Test should build successfully with Trusted Types in report-only mode 1`] = `
"<!doctype html><html><head><meta http-equiv="Content-Security-Policy" content="script-src 'strict-dynamic' 'sha256-e8lGHsOdJBC9DQQ8Ur9M8w3j6amuteoVxxn7lMC2I/4=' https: 'unsafe-inline';object-src 'none';base-uri 'self';require-trusted-types-for 'script';"><title>Complex Test</title><link rel="preload" href="styles.css" as="style"></head><body><script>
    if (self.trustedTypes && !self.trustedTypes.defaultPolicy) {
      
      const generateAndSendReport = function(sample) {
        const stack = (new Error()).stack;
        const regex = /([^ ()]+):(d+):(d+)/g;
        let match;
        let lastMatch;
        while ((match = regex.exec(stack)) !== null) {
          lastMatch = match;
        }
        const data = JSON.stringify({'csp-report': {
          'document-uri': window.location.href,
          'referrer': '', // No way of knowning this.
          'violated-directive': 'require-trusted-types-for',
          'effective-directive': 'require-trusted-types-for',
          'original-policy': '', // No way of knowing this
          'disposition': 'report',
          'blocked-uri': 'trusted-types-sink',
          'line-number': lastMatch && lastMatch[2] ? +lastMatch[2] : 0,
          'column-number': lastMatch && lastMatch[3] ? +lastMatch[3] : 0,
          'source-file': lastMatch && lastMatch[1] ? lastMatch[1] : '',
          'status-code': 0, // No way of knowing this.
          'script-sample': sample
        }});
        const blob = new Blob([data], {'Content-Type': 'application/json'});
        if (self.navigator && self.navigator.sendBeacon) {
          navigator.sendBeacon('https://example.com/report', blob);
        }
        return data;
      };
      
      self.trustedTypes.createPolicy('default', {
        createHTML: function(s) {
          console.error("[Report Only] Uncaught TypeError: This document requires 'TrustedHTML' assignment: " + s);
          generateAndSendReport('Element innerHTML|' + s);
          return s;
        },
        createScript: function(s) {
          console.error("[Report Only] Uncaught TypeError: This document requires 'TrustedScript' assignment: " + s);
          generateAndSendReport('HTMLScriptElement text|' + s);
          return s;
        },
        createScriptURL: function(s) {
          console.error("[Report Only] Uncaught TypeError: This document requires 'TrustedScriptURL' assignment: " + s);
          generateAndSendReport('HTMLScriptElement src|' + s);
          return s;
        },
      });
    }
    </script><h1>Hello World</h1><script>
    var scripts = [{"src":"library1.bundle.js"},{"src":"app.bundle.js"},{"src":"library2.bundle.js"}];
    var scriptSrcs = new Set(scripts.map(function(s) { return s.src; }));
    var policy = self.trustedTypes && self.trustedTypes.createPolicy ?
      self.trustedTypes.createPolicy('strict-csp#loader', {createScriptURL: function(u) {
        return scriptSrcs.has(u) ? u : null;
      }}) : { createScriptURL: function(u) { return u; } };
    scripts.forEach(function(scriptInfo) {
      var s = document.createElement('script');
      s.src = policy.createScriptURL(scriptInfo.src);
      if (scriptInfo.type) {
        s.type = scriptInfo.type;
      }
      s.async = false; // preserve execution order.
      document.body.appendChild(s);
    });
    </script></body></html>"
`;

exports[`StrictCspHtmlWebpackPlugin Integration Test should build successfully without Trusted Types 1`] = `
"<!doctype html><html><head><meta http-equiv="Content-Security-Policy" content="script-src 'strict-dynamic' 'sha256-fosdR5bZcQQV854t9xSNaZphl31I2w+M/eC0xRqzm3Y=' https: 'unsafe-inline';object-src 'none';base-uri 'self';"><title>Complex Test</title><link rel="preload" href="styles.css" as="style"></head><body><h1>Hello World</h1><script>
    var scripts = [{"src":"library1.bundle.js"},{"src":"app.bundle.js"},{"src":"library2.bundle.js"}];
    scripts.forEach(function(scriptInfo) {
      var s = document.createElement('script');
      s.src = scriptInfo.src;
      if (scriptInfo.type) {
        s.type = scriptInfo.type;
      }
      s.async = false; // preserve execution order.
      document.body.appendChild(s);
    });
    </script></body></html>"
`;
